---
layout: post
title: 关于求得全排列的一些想法
categories: blog
tags:
- algorithm
- dictionary order
description: 所谓的顺序，就是按照一些既定的规则来排列，那么序的根本也就只有规则了，而排的是什么倒是无所谓的。
---

## 缘起

最近在为找实习做准备，就在[LeetCode](http://oj.leetcode.com/)做些题目，其中有关于排列（permutation）的，这其中就牵扯到一个所谓的“字典法”的方法来获取下一个排列，也是STL里的next_permutation()函数所采用的方法，所以就去找了下算法的具体内容。

## 字典法

所谓“字典法”，按照我的理解，应该是依照类似字典中按照拼音排序的方法来生成全排列。但是，如果了解了算法的内容，会发现好像其实和字典并没有什么太多的相关之处，可能唯一有关的就是两者在形式上的类似。

当一个序列，比如123，我们想要求得它的全排列，也就是有1、2、3三个数组组成的所有三位数，而既然是数字，那么必然有大小，而大小又是又各个位上数字的大小决定的。首先我们可以看到，123是其中最小的一个三位数，那第二小的呢？当然要从最低位开始考虑，因为是第二小，所以要尽量和当前的数字接近。考虑到最低位是3，而想要改变的话，唯一的办法就是和另外一位上的数字进行交换，那么为了保证尽量小的改变当然是十位，所以我们将十位和个位进行交换，得到了第二小的数字132。然后再继续，想要得到第三小的数，那就再把现在的数增大一点，132再大的话，100+的数字是没有了，接下来就要变百位了，100+没有了就进200+，那最小的200+应该就是213了，按照这个思路最终可以把所有的6的排列都找到，依次是：

	123->132->213->231->312->321

而用比较正式的语言来叙述的话，就是，每次从数字的最后一位开始倒序，直到找到一个升序对(num[i-1] < num[i])，然后从该位置i以后找一个比num[i-1]大的最小的数，并且和num[i-1]进行交换，完成之后再将i位之后的数字(包括第i位)反转，即形成一个升序列，即可。

## 思考

其实，对于任何可以和自然数建立映射的元素，都可以用类似的办法得到所有的排序，数字的组成直观的带来的大小的顺序，从而使得排列的产生可以按照一定的顺序产生，而这个顺序可能在元素之间本并不成立，但是产生的排列可能是有其内在的关系，比如两个相邻的排列间可能实在元素间通过某种等值带换之后最相邻的。

将事物映射到自然数应该是最直观的，也应该是最容易理解的，就相当于把一个坚涩的问题用数学表达出来一样，把一个事物抽象等价完成之后，所以对于其本身的研究都可以转嫁到数学上，这样，可以摒弃掉很多干扰，而且也可以通过以后的数学理论来相应的回推处事物间的规律，这就是理论学科存在的意义。而所有的理论学科归根到底都可以归结到数学中来，所以数学才是一门十分神奇的学科，虽然抽象难懂，但可能却可以指引处新的规律。

事物都可以一般化，当一般化完成之后就好像一个框架搭好一样，剩下的事情就是依照最初状态和框架的规律行事就好了。就像当我们想要求得数列的全排列，知道了每次就是要求得最小的那个数列排列的时候其实手算也可以一个一个有规律地找出来。一般化之后带来的，我认为，应该是更加容易理解的，因为是一种相对来说更高层次的东西，而更高层的总是相通的，也就是我们人本身就可以接受一些东西，因为大家都是同一个造物主创造的，就像说，在体育中，感觉好的时候什么高难度的动作都可以做出来，所谓感觉好，不外乎就是我们的身体更加的接近自然状态，没有异样，用一个自然的身体在自然的规律中活动，那自然是顺畅的，因为大家是相通的。科学的目的，我想也就不外是去发现自然中的规律，或者说是造物主定下的规则，但是如果这些规则是能在本身的限制下被发现，那只能说是造物主故意留下的。

我感觉已经胡乱说得太多没有逻辑的话了..
